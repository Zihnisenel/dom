dom son

import cv2
import threading
from roboflow import Roboflow

# RoboFlow API anahtarı
api_key = 'ZhDF3hQ0GxEGRf3tlBMQ'
project_name = 'domates-z1onl'


rf = Roboflow(api_key=api_key)
project = rf.workspace().project(project_name)
model = project.version(1).model

# Kamera 
cap = cv2.VideoCapture(0)  
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

def run_kirmizi_actions():
    print("Running kirmizi actions")

def run_sari_actions():
    print("Running sari actions")

def run_yesil_actions():
    print("Running yesil actions")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Kamera görüntüsü alınamadı.")
            break

        
        result = model.predict(frame, confidence=40, overlap=30).json()
        print("Detection result:", result)  

    
        for detection in result['predictions']:
            label = detection['class']
            x, y, w, h = detection['x'], detection['y'], detection['width'], detection['height']
            confidence = detection['confidence']

            # Tespit edilen nesneye göre işlem yap
            if label == 'kırmızı':
                print("Kırmızı nesne tespit edildi")
                threading.Thread(target=run_kirmizi_actions).start()
            elif label == 'sarı':
                print("Sarı nesne tespit edildi")
                threading.Thread(target=run_sari_actions).start()
            elif label == 'yeşil':
                print("Yeşil nesne tespit edildi")
                threading.Thread(target=run_yesil_actions).start()

            # Tespit edilen nesneyi çizme
            cv2.rectangle(frame, (int(x - w / 2), int(y - h / 2)), (int(x + w / 2), (int(y + h / 2))), (0, 255, 0), 2)
            cv2.putText(frame, f"{label}: {confidence:.2f}", (int(x - w / 2), int(y - h / 2) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Görüntüyü ekranda gösterme
        cv2.imshow('Object Detection', frame)

        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    pass

finally:
    
    cap.release()
    cv2.destroyAllWindows()
